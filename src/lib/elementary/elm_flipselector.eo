class Elm.Flipselector (Elm.Layout, Efl.Ui.Spin,
                        Elm.Interface.Atspi_Widget_Action,
                        Efl.Ui.Selectable)
{
   [[Elementary flipselector class]]
   legacy_prefix: elm_flipselector;
   eo_prefix: elm_obj_flipselector;
   event_prefix: elm_flipselector;
   methods {
      @property items {
         get {
            [[Get the internal list of items in a given flip selector widget.

              This list is not to be modified in any way and must not be
              freed. Use the list members with functions like
              \@ref elm_object_item_text_set,
              \@ref elm_object_item_text_get,
              \@ref elm_object_item_del,
              \@ref elm_flipselector_item_selected_get,
              \@ref elm_flipselector_item_selected_set.

              Warning: This list is only valid until $obj object's internal
              items list is changed. It should be fetched again with another
              call to this function when changes happen.
            ]]
            return: const(list<Elm.Widget.Item>); [[List of items]]
         }
      }
      @property first_item {
         get {
            [[Get the first item in the given flip selector widget's list of
              items.

              See also @.item_append,
              @.last_item.get.
            ]]
            return: Elm.Widget.Item; [[The first item or $null, if it has no items (and on
            errors).]]

         }
      }
      @property last_item {
         get {
            [[Get the last item in the given flip selector widget's list of
              items.

              See also @.item_prepend,
              @.first_item.get.
            ]]
            return: Elm.Widget.Item; [[The last item or $null, if it has no items (and on
            errors).]]

         }
      }
      @property selected_item {
         get {
            [[Get the currently selected item in a flip selector widget.]]
            return: Elm.Widget.Item; [[The selected item or $null, if the widget has no items
              (and on errors).]]

         }
      }
      item_prepend {
         [[Prepend a (text) item to a flip selector widget

           The widget's list of labels to show will be prepended with the
           given value. If the user wishes so, a callback function pointer
           can be passed, which will get called when this same item is
           selected.

           Note: The current selection won't be modified by prepending
           an element to the list.

           Note: The maximum length of the text label is going to be
           determined by the widget's theme. Strings larger than
           that value are going to be truncated.
         ]]
         return: Elm.Widget.Item; [[New widget item]]
         params {
            @in label: string; [[The (text) label of the new item.]]
            @in func: Evas_Smart_Cb @optional; [[Convenience callback function to take place when
            item is selected.]]
            @in data: void_ptr @optional; [[Data passed to $func, above.]]
         }
      }
      flip_next {
         [[Programmatically select the next item of a flip selector widget

           Note: The selection will be animated. Also, if it reaches the
           end of its list of member items, it will continue with the first
           one onwards.
         ]]
      }
      item_append {
         [[Append a (text) item to a flip selector widget

           The widget's list of labels to show will be appended with the
           given value. If the user wishes so, a callback function pointer
           can be passed, which will get called when this same item is
           selected.

           Note: The current selection won't be modified by appending an
           element to the list.

           Note: The maximum length of the text label is going to be
           determined by the widget's theme. Strings larger than
           that value are going to be truncated.
         ]]
         return: Elm.Widget.Item; [[New widget item]]
         params {
            @in label: string; [[The (text) label of the new item.]]
            @in func: Evas_Smart_Cb @optional; [[Convenience callback function to take place when
            item is selected.]]
            @in data: const(void_ptr) @optional; [[Data passed to $func, above.]]
         }
      }
      flip_prev {
         [[Programmatically select the previous item of a flip selector
           widget

           Note: The selection will be animated. Also, if it reaches the
           beginning of its list of member items, it will continue with the
           last one backwards.
         ]]
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Elm.Widget.theme_apply;
      Elm.Widget.focus_next_manager_is;
      Elm.Widget.focus_direction_manager_is;
      Elm.Widget.widget_event;
      Elm.Layout.sizing_eval;
      Efl.Ui.Spin.min_max { get; set; }
      Efl.Ui.Spin.step { get; set; }
      Efl.Ui.Spin.value { get; set; }
      Efl.Ui.Spin.interval { get; set; }
      Elm.Interface.Atspi_Widget_Action.elm_actions { get; }
   }
   events {
      underflowed; [[Called when flipselector is underflowed]]
      overflowed; [[Called when flipselector is overflowed]]
   }
}
