enum Elm.Colorselector.Mode
{
   [[Different modes supported by Colorselector

      See also @Elm.Colorselector.mode.set, @Elm.Colorselector.mode.get.
   ]]
   legacy: elm_colorselector;
   palette = 0, [[Only color palette is displayed.]]
   components, [[Only color selector is displayed.]]
   both, [[Both Palette and selector is displayed, default.]]
   picker, [[Only color picker is displayed.]]
   all [[All possible color selector is displayed.]]
}

class Elm.Colorselector (Elm.Layout, Elm.Interface.Atspi_Widget_Action,
                         Efl.Ui.Clickable)
{
   [[Elementary colorselector class]]
   legacy_prefix: elm_colorselector;
   eo_prefix: elm_obj_colorselector;
   event_prefix: elm_colorselector;
   methods {
      @property color {
         set {
            [[Set color to colorselector.]]

         }
         get {
            [[Get current color from colorselector.]]
         }
         values {
            r: int; [[Red value of color]]
            g: int; [[Green value of color]]
            b: int; [[Blue value of color]]
            a: int; [[Alpha value of color]]
         }
      }
      @property palette_name {
         set {
            [[Set current palette's name

              When colorpalette name is set, colors will be loaded from and saved to config
              using the set name. If no name is set then colors will be loaded from or
              saved to "default" config.
            ]]
         }
         get {
            [[Get current palette's name

              Returns the currently set palette name using which colors will be
              saved/loaded in to config.
            ]]
         }
         values {
            palette_name: string; [[Name of palette]]
         }
      }
      @property mode {
         set {
            [[Set Colorselector's mode.

              Colorselector supports three modes palette only, selector only and both.
            ]]
         }
         get {
            [[Get Colorselector's mode.]]
         }
         values {
            mode: Elm.Colorselector.Mode; [[Elm_Colorselector_Mode]]
         }
      }
      @property palette_items {
         get {
            [[Get list of palette items.

              Note That palette item list is internally managed by colorselector widget and
              it should not be freed/modified by application.

              @since 1.9
            ]]
            return: const(list<Elm.Widget.Item>); [[The list of color palette items.]]
         }
      }
      @property palette_selected_item {
         get {
            [[Get the selected item in colorselector palette.

              @since 1.9]]

            return: Elm.Widget.Item; [[The selected item, or $null if none selected.]]
         }
      }
      palette_color_add {
         [[Add a new color item to palette.]]

         return: Elm.Widget.Item; [[A new color palette Item.]]
         params {
            @in r: int; [[Red value of color]]
            @in g: int; [[Green value of color]]
            @in b: int; [[Blue value of color]]
            @in a: int; [[Alpha value of color]]
         }
      }
      palette_clear {
         [[Clear the palette items.]]
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Elm.Widget.theme_apply;
      Elm.Widget.focus_next_manager_is;
      Elm.Widget.focus_next;
      Elm.Widget.focus_direction_manager_is;
      Elm.Widget.focus_highlight_geometry_get;
      Elm.Widget.access;
      Elm.Widget.widget_event;
      Elm.Layout.sizing_eval;
      Elm.Interface.Atspi_Widget_Action.elm_actions { get; }
      Elm.Interface.Atspi_Accessible.children { get; }
   }
   events {
      color,item,selected; [[Called when color item was selected]]
      color,item,longpressed; [[Called when color item got a long press]]
      changed; [[Called when colorselector changed]]
      changed,user; [[Called when the object changed due to user interaction]]
   }
}
