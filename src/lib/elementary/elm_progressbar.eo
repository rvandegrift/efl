class Elm.Progressbar (Elm.Layout, Efl.Ui.Progress,
                       Efl.Orientation)
{
   legacy_prefix: elm_progressbar;
   eo_prefix: elm_obj_progressbar;
   event_prefix: elm_progressbar;
   methods {
      @property pulse {
         [[Control whether a given progress bar widget is at "pulsing mode" or not.

           By default, progress bars will display values from the low to
           high value boundaries. There are, though, contexts in which the
           progress of a given task is unknown. For such cases,
           one can set a progress bar widget to a "pulsing state", to give
           the user an idea that some computation is being held, but
           without exact progress values. In the default theme, it will
           animate its bar with the contents filling in constantly and back
           to non-filled, in a loop. To start and stop this pulsing
           animation, one has to explicitly call elm_progressbar_pulse().]]
         set {
         }
         get {
         }
         values {
            pulse: bool; [[$true to put $obj in pulsing mode, $false to put it back to its default one]]
         }
      }
      part_value_set {
         [[Set the progress value (in percentage) on a given progress bar widget for the given part name

           Use this call to set progress bar status for more than one progress status .

           @since 1.8]]
         params {
            @in part: string; [[The partname to which val have to set]]
            @in val: double; [[The progress value (must be between $0.0 and 1.0)]]
         }
      }
      part_value_get @const {
         [[Get the progress value (in percentage) on a given progress bar widget for a particular part

           @since 1.8]]
         return: double; [[The value of the progressbar]]
         params {
            @in part: string; [[The part name of the progress bar]]
         }
      }
      pulse {
         [[Start/stop a given progress bar "pulsing" animation, if its under that mode

           Note: This call won't do anything if $obj is not under "pulsing mode".]]
         params {
            @in state: bool; [[$true, to start the pulsing animation, $false to stop it]]
         }
      }
   }
   implements {
      class.constructor;
      Eo.Base.constructor;
      Efl.Canvas.Group.group_add;
      Efl.Canvas.Group.group_del;
      Elm.Widget.theme_apply;
      Elm.Widget.focus_next_manager_is;
      Elm.Widget.focus_direction_manager_is;
      Elm.Widget.sub_object_del;
      Elm.Layout.text_aliases.get;
      Elm.Layout.content_aliases.get;
      Elm.Layout.sizing_eval;
      Efl.Ui.Progress.span_size;
      Efl.Ui.Progress.progress_value;
      Efl.Ui.Progress.unit_format;
      Efl.Orientation.orientation;
      Efl.Part.part;
   }
   events {
      changed;
   }

}
