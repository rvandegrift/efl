enum Elm.Ctxpopup.Direction
{
   [[Direction in which to show the popup.]]
   down, [[Ctxpopup show appear below clicked area.]]
   right, [[Ctxpopup show appear to the right of the clicked area.]]
   left, [[Ctxpopup show appear to the left of the clicked area.]]
   up, [[Ctxpopup show appear above the clicked area.]]
   unknown [[Ctxpopup does not determine it's direction yet.]]
}

class Elm.Ctxpopup (Elm.Layout, Elm.Interface.Atspi_Widget_Action,
                    Efl.Orientation, Efl.Ui.Menu)
{
   [[Elementary context popup class]]
   legacy_prefix: elm_ctxpopup;
   eo_prefix: elm_obj_ctxpopup;
   event_prefix: elm_ctxpopup;
   methods {
      @property auto_hide_disabled {
         set {
            [[Set ctxpopup auto hide mode triggered by ctxpopup policy.

              Use this function when user wants ctxpopup not to hide automatically.
              By default, ctxpopup is dismissed whenever mouse clicked its background area, language is changed,
              and its parent geometry is updated(changed).
              Not to hide ctxpopup automatically, disable auto hide function by calling this API,
              then ctxpopup won't be dismissed in those scenarios.

              Default value of disabled is $false.

              See also @.auto_hide_disabled.get.

              @since 1.9
            ]]
         }
         get {
            [[Get ctxpopup auto hide mode triggered by ctxpopup policy.

              See also @.auto_hide_disabled.set for more information.

              @since 1.9
            ]]
         }
         values {
            disabled: bool; [[Auto hide enable/disable.]]
         }
      }
      @property hover_parent {
         set {
            [[Set the Ctxpopup's parent

              Set the parent object.

              Note: \@ref elm_ctxpopup_add will automatically call this function
              with its $parent argument.

              See also \@ref elm_ctxpopup_add,
              \@ref elm_hover_parent_set.
            ]]
         }
         get {
            [[Get the Ctxpopup's parent

              See also @.hover_parent.set for more information
            ]]
         }
         values {
            parent: Efl.Canvas.Object; [[The parent to use.]]
         }
      }
      @property direction_priority {
         set {
            [[Set the direction priority of a ctxpopup.

              This functions gives a chance to user to set the priority of ctxpopup
              showing direction. This doesn't guarantee the ctxpopup will appear in the
              requested direction.

              See also @.Direction.
            ]]
         }
         get {
            [[Get the direction priority of a ctxpopup.

              See also @.direction_priority.set for more information.
            ]]
         }
         values {
            first: Elm.Ctxpopup.Direction; [[1st priority of direction]]
            second: Elm.Ctxpopup.Direction; [[2nd priority of direction]]
            third: Elm.Ctxpopup.Direction; [[3th priority of direction]]
            fourth: Elm.Ctxpopup.Direction; [[4th priority of direction]]
         }
      }
      @property direction {
         get {
            [[Get the current direction of a ctxpopup.

              Warning: Once the ctxpopup showed up, the direction would be determined

            ]]
            return: Elm.Ctxpopup.Direction(Elm.Ctxpopup.Direction.unknown); [[Direction]]
         }
      }
      dismiss {
         [[Dismiss a ctxpopup object

         Use this function to simulate clicking outside of the ctxpopup to dismiss it.
         In this way, the ctxpopup will be hidden and the "clicked" signal will be
         emitted.]]

      }
      clear {
         [[Clear all items in the given ctxpopup object.]]
      }
      item_append {
         [[Add a new item to a ctxpopup object.


           Warning:Ctxpopup can't hold both an item list and a content at the same
           time. When an item is added, any previous content will be removed.

           See also \@ref elm_object_content_set.
         ]]
         return: Elm.Widget.Item; [[A handle to the item added or $null, on errors.]]

         params {
            @in label: string; [[The Label of the new item]]
            @in icon: Efl.Canvas.Object @optional; [[Icon to be set on new item]]
            @in func: Evas_Smart_Cb @optional; [[Convenience function called when item selected]]
            @in data: const(void_ptr) @optional; [[Data passed to $func]]
         }
      }
      item_prepend {
         [[Prepend a new item to a ctxpopup object.

           Warning: Ctxpopup can't hold both an item list and a content at the same
           time. When an item is added, any previous content will be removed.

           See also \@ref elm_object_content_set.

           @since 1.11
         ]]
         return: Elm.Widget.Item; [[A handle to the item added or $null, on errors.]]

         params {
            @in label: string; [[The Label of the new item]]
            @in icon: Efl.Canvas.Object @optional; [[Icon to be set on new item]]
            @in func: Evas_Smart_Cb @optional; [[Convenience function called when item selected]]
            @in data: const(void_ptr) @optional; [[Data passed to $func]]
         }
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Elm.Widget.widget_parent { set; }
      Elm.Widget.focus_direction;
      Elm.Widget.focus_direction_manager_is;
      Elm.Widget.focus_next_manager_is;
      Elm.Widget.focus_next;
      Elm.Widget.disable;
      Elm.Widget.translate;
      Elm.Widget.theme_apply;
      Elm.Widget.widget_event;
      Efl.Ui.Menu.selected_item { get; }
      Efl.Ui.Menu.first_item { get; }
      Efl.Ui.Menu.last_item { get; }
      Efl.Ui.Menu.items { get; }
      Elm.Layout.sub_object_add_enable;
      Elm.Layout.sizing_eval;
      Elm.Interface.Atspi_Widget_Action.elm_actions { get; }
      Elm.Interface.Atspi_Accessible.state_set { get; }
      Efl.Orientation.orientation { get; set; }
      Efl.Part.part;
   }
   events {
      dismissed; [[Called when context popup was dismissed]]
      geometry,update; [[Called when context popup geometry was updated]]
   }
}
