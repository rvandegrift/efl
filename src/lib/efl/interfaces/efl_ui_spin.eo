interface Efl.Ui.Spin()
{
   methods {
      @property min_max {
         [[Control the minimum and maximum values for the spinner.

           Define the allowed range of values to be selected by the user.

           If actual value is less than $min, it will be updated to $min. If it
           is bigger then $max, will be updated to $max.

           By default, min is equal to 0, and max is equal to 100.

           Warning: Maximum must be greater than minimum.]]
         set {
         }
         get {
         }
         values {
            min: double; [[The minimum value.]]
            max: double; [[The maximum value.]]
         }
      }
      @property step {
         [[Control the step used to increment or decrement the spinner value.

           This value will be incremented or decremented to the displayed value.
           It will be incremented while the user keep right or top arrow pressed,
           and will be decremented while the user keep left or bottom arrow pressed.

           The interval to increment / decrement can be set with @.interval.set.

           By default step value is equal to 1.]]
         set {
         }
         get {
         }
         values {
            step: double; [[The step value.]]
         }
      }
      @property value {
         [[Control the value the spinner displays.

           Value will be presented on the label following format specified with
           elm_spinner_format_set().

           Warning The value must to be between min and max values. This values
           are set by elm_spinner_min_max_set().]]
         set {
         }
         get {
         }
         values {
            val: double; [[The value to be displayed.]]
         }
      }
      @property interval {
         [[Control the interval on time updates for an user mouse button hold on spinner widgets' arrows.

           This interval value is decreased while the user holds the
           mouse pointer either incrementing or decrementing spinner's value.

           This helps the user to get to a given value distant from the
           current one easier/faster, as it will start to change quicker and
           quicker on mouse button holds.

           The calculation for the next change interval value, starting from
           the one set with this call, is the previous interval divided by
           $1.05, so it decreases a little bit.

           The default starting interval value for automatic changes is
           $0.85 seconds.]]
         set {
         }
         get {
         }
         values {
            interval: double; [[The (first) interval value in seconds.]]
         }
      }
   }
}
