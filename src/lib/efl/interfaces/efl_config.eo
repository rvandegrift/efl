interface Efl.Config ()
{
   [[A generic configuration interface, that holds key-value pairs.]]
   methods {
      /* FIXME: make this a property -- @own is a problem */
      config_set {
      	 [[Set configuration]]
         params {
            name: string; [[Configuration option name]]
            val: ptr(const(generic_value)); [[Configuration option value]]
         }
         return: bool; [[$false in case of error: value type was invalid, the
                         config can't be changed, config does not exist...]]
      }
      config_get @const {
      	 [[Get configuration]]
         params {
            name: string; [[Configuration option name]]
         }
         return: free(own(ptr(generic_value)), eina_value_free); [[Configuration option value]]
      }
      config_list_get @const {
         [[Returns a list of generic values under a given key.]]
         params {
            @in name: string; [[Configuration option name]]
         }
         return: free(own(iterator<ptr(generic_value)>), eina_iterator_free); [[
                 List of configuration option values]]
      }
   }
}

/* NOTES:
 - Elm_Color_Class list -> no need to return the struct, only the name matters
                           but also provide func to get desc from name
 - Elm_Color_Overlay -> see with Jee-Yong and his color patch (common intf)
 - elm_config_font_overlay_set -> ?
 - what else?
*/
