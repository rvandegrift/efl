type @extern Evas.Text_Style_Type : __undefined_type;

class Evas.Text (Efl.Canvas.Object, Efl.Text, Efl.Text.Properties, Efl.Canvas.Filter.Internal)
{
   [[Evas text class]]
   legacy_prefix: evas_object_text;
   eo_prefix: evas_obj_text;
   methods {
      @property shadow_color {
         [[Controls the shadow color for the given text object.

           Shadow effects, which are fading colors decorating the text
           underneath it, will just be shown if the object is set to one of
           the following styles:

           - $EVAS_TEXT_STYLE_TYPE_SHADOW
           - $EVAS_TEXT_STYLE_TYPE_OUTLINE_SHADOW
           - $EVAS_TEXT_STYLE_TYPE_FAR_SHADOW
           - $EVAS_TEXT_STYLE_TYPE_OUTLINE_SOFT_SHADOW
           - $EVAS_TEXT_STYLE_TYPE_SOFT_SHADOW
           - $EVAS_TEXT_STYLE_TYPE_FAR_SOFT_SHADOW

           One can also change the direction where the shadow grows to, with
           @.style

           See @.shadow_color]]
         set {
         }
         get {
            [[Note: Use $NULL pointers on the color components you're not
            interested in: they'll be ignored by the function.]]
         }
         values {
            r: int; [[The red component of the given color.]]
            g: int; [[The green component of the given color.]]
            b: int; [[The blue component of the given color.]]
            a: int; [[The alpha component of the given color.]]
         }
      }
      @property ellipsis {
         [[Controls the ellipsis that should be used for the text object.

          This is a value between 0.0 and 1.0 indicating the position of the text
          to be shown. 0.0 means the start will be shown and the end trimmed, 1.0
          means the beginning will be trimmed and the end will be shown, and any value
          in between will cause ellipsis to be added in both end of the text and the
          requested part to be shown.
          -1.0 means ellipsis is turned off.

          @since 1.8]]
         set {
         }
         get {
         }
         values {
            ellipsis: double(-1.0); [[The ellipsis. Allowed values: -1.0 or 0.0-1.0]]
         }
      }
      @property bidi_delimiters {
         [[Sets the BiDi delimiters used in the textblock.

           BiDi delimiters are use for in-paragraph separation of bidi segments. This
           is useful for example in recipients fields of e-mail clients where bidi
           oddities can occur when mixing RTL and LTR.

           @since 1.1]]
         set {
         }
         get {
         }
         values {
            delim: string; [[A null terminated string of delimiters, e.g ",|".]]
         }
      }
      @property outline_color {
         [[Controls the outline color for the given text object.

           Outline effects (colored lines around text glyphs) will just be
           shown if the object is set to one of the following styles:
           - $EVAS_TEXT_STYLE_TYPE_OUTLINE
           - $EVAS_TEXT_STYLE_TYPE_SOFT_OUTLINE
           - $EVAS_TEXT_STYLE_TYPE_OUTLINE_SHADOW
           - $EVAS_TEXT_STYLE_TYPE_OUTLINE_SOFT_SHADOW
         ]]
         set {
         }
         get {
         }
         values {
            r: int; [[The red component of the given color.]]
            g: int; [[The green component of the given color.]]
            b: int; [[The blue component of the given color.]]
            a: int; [[The alpha component of the given color.]]
         }
      }
      @property glow2_color {
         [[Sets the 'glow 2' color for the given text object.

           'Glow 2' effects, which are glowing colors decorating the text's
           (immediate) surroundings, will just be shown if the object is set
           to the $EVAS_TEXT_STYLE_TYPE_GLOW style. See also @.glow_color.
         ]]
         set {
         }
         get {
         }
         values {
            r: int; [[The red component of the given color.]]
            g: int; [[The green component of the given color.]]
            b: int; [[The blue component of the given color.]]
            a: int; [[The alpha component of the given color.]]
         }
      }
      @property style {
            [[Controls the style to apply on the given text object.

              Text object styles are one of the values in @Evas.Text_Style_Type
              Some of those values are combinations of more than one style,
              and some account for the direction of the rendering of shadow effects.

              Note: One may use the helper macros #EVAS_TEXT_STYLE_BASIC_SET and
              #EVAS_TEXT_STYLE_SHADOW_DIRECTION_SET to assemble a style value.]]

            /* FIXME-doc:
            The following figure illustrates the text styles:

            @image html text-styles.png
            @image rtf text-styles.png
            @image latex text-styles.eps

            @see evas_object_text_style_get()
            @see evas_object_text_shadow_color_set()
            @see evas_object_text_outline_color_set()
            @see evas_object_text_glow_color_set()
            @see evas_object_text_glow2_color_set() */
         set {
         }
         get {
         }
         values {
            style: Evas.Text_Style_Type; [[Style type]]
         }
      }
      @property glow_color {
         [[Sets the glow color for the given text object.

           Glow effects, which are glowing colors decorating the text's
           surroundings, will just be shown if the object is set to the
           $EVAS_TEXT_STYLE_TYPE_GLOW style.

           Note: Glow effects are placed from a short distance of the text
           itself, but not touching it. For glowing effects right on the
           borders of the glyphs, see 'glow 2' effects.]]
         set {
         }
         get {
         }
         values {
            r: int; [[The red component of the given color.]]
            g: int; [[The green component of the given color.]]
            b: int; [[The blue component of the given color.]]
            a: int; [[The alpha component of the given color.]]
         }
      }
      @property max_descent {
      	 [[Maximal descent property]]
         get {
            return: int; [[Evas coordinate]]
         }
      }
      @property style_pad {
         get {
            [[Gets the text style pad of a text object.]]
         }
         values {
            l: int; [[The left pad (or $NULL).]]
            r: int; [[The right pad (or $NULL).]]
            t: int; [[The top pad (or $NULL).]]
            b: int; [[The bottom pad (or $NULL).]]
         }
      }
      @property direction {
         get {
            [[Retrieves the direction of the text currently being displayed in the
            text object.]]

            return: Efl.Text.Bidirectional_Type; [[Bidirectional type]]
         }
      }
      @property ascent {
      	 [[Ascent property]]
         get {
            return: int; [[Evas coordinate]]
         }
      }
      @property horiz_advance {
      	 [[Horizontal advance property]]
         get {
            return: int; [[Evas coordinate]]
         }
      }
      @property inset {
      	 [[Inset property]]
         get {
            return: int; [[Evas coordinate]]
         }
      }
      @property max_ascent {
      	 [[Maximal ascent property]]
         get {
            return: int; [[Evas coordinate]]
         }
      }
      @property vert_advance {
      	 [[Vertical advance property]]
         get {
            return: int; [[Evas coordinate]]
         }
      }
      @property descent {
      	 [[descent property]]
         get {
            return: int; [[Evas coordinate]]
         }
      }
      last_up_to_pos @const {
         [[Returns the logical position of the last char in the text up to
           the pos given.

           This is NOT the position of the last char because of the possibility
           of RTL in the text.
         ]]
         return: int(-1); [[Logical position of the last char]]
         params {
            @in x: int; [[X coordinate]]
            @in y: int; [[Y coordinate]]
         }
      }
      char_coords_get @const {
      	 [[Get character coordinates]]
         return: int; [[Logical position of char]]
         params {
            @in x: int; [[X coordinate]]
            @in y: int; [[Y coordinate]]
            @out cx: int; [[X coordinate]]
            @out cy: int; [[Y coordinate]]
            @out cw: int; [[Width]]
            @out ch: int; [[Height]]
         }
      }
      char_pos_get @const {
         [[Retrieve position and dimension information of a character within a text @Efl.Canvas.Object

         This function is used to obtain the X, Y, width and height of the character
         located at $pos within the @Efl.Canvas.Object $obj. $obj must be a text object
         Any of the $Evas_Coord parameters ($cx, $cy, $cw, $ch) may be $NULL in which case no value will be assigned to that
         parameter.]]

         return: bool; [[$false on success, $true otherwise]]
         params {
            @in pos: int; [[The character position to request co-ordinates for.]]
            @out cx: int; [[A pointer to an int to store the X value in (can be NULL).]]
            @out cy: int; [[A pointer to an int to store the Y value in (can be NULL).]]
            @out cw: int; [[A pointer to an int to store the Width value in (can be NULL).]]
            @out ch: int; [[A pointer to an int to store the Height value in (can be NULL).]]
         }
      }
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.destructor;
      Efl.Gfx.size { set; }
      Efl.Text.text { get; set; }
      Efl.Text.Properties.font { get; set; }
      Efl.Text.Properties.font_source { get; set; }
      Efl.Gfx.Filter.filter_program { set; }
      Efl.Canvas.Filter.Internal.filter_dirty;
      Efl.Canvas.Filter.Internal.filter_input_alpha;
      Efl.Canvas.Filter.Internal.filter_input_render;
      Efl.Canvas.Filter.Internal.filter_state_prepare;
      Efl.Canvas.Object.paragraph_direction { set; get; }
   }
}
