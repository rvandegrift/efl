class Efl.Canvas.Group (Efl.Canvas.Object)
{
   [[A group object is a container of other canvas objects. Its children
     move along their parent, are often clipped with a common clipper.
     This is part of the legacy smart object concept.

     A group is not necessarily a container (see $Efl.Container), in the
     sense that a standard widget may not have any empty slots for content,
     but is still a group of low-level canvas objects (clipper, raw objects,
     etc...).
   ]]
   legacy_prefix: evas_object_smart;
   data: Evas_Smart_Data;
   methods {
      @property group_need_recalculate {
         [[Indicates that the group's layout need to be recalculated.

           If this flag is set, then the @.group_calculate function will
           be called, during rendering phase of the canvas. After that,
           this flag will be automatically unset.

           Note: just setting this flag will not make the canvas' whole scene
           dirty, by itself, and evas_render() will have no effect. To
           force that, use @.group_change, that will also call this function
           automatically, with $true as parameter.

           See also @.group_calculate.
         ]]
         set {
            legacy: evas_object_smart_need_recalculate_set;
         }
         get {
            legacy: evas_object_smart_need_recalculate_get;
         }
         values {
            value: bool; [[$true if the group layout needs to be recalculated, $false otherwise]]
         }
      }
      group_change {
         [[Marks the object as dirty.

           This also forcefully marks the given object as needing
           recalculation. As an effect, on the next rendering cycle its
           @.group_calculate method will be called.
         ]]
         legacy: evas_object_smart_changed;
      }
      group_calculate {
         [[Triggers an immediate recalculation of this object's geometry.

           This will also reset the flag @.group_need_recalculate.
         ]]
         legacy: evas_object_smart_calculate;
      }
      group_children_iterate @const {
         [[Returns an iterator over the children of this object, that are
           canvas objects.

           This returns the list of "smart" children. This might be different
           from both the $Efl.Object children list as well as the $Efl.Container
           content list.
         ]]
         return: free(own(iterator<Efl.Canvas.Object>), eina_iterator_free); [[Iterator to object children]]
         legacy: evas_object_smart_iterator_new;
      }
      group_member_add {
         [[Set an Evas object as a member of a given smart object.

           Members will automatically be stacked and layered together with the
           smart object. The various stacking functions will operate on
           members relative to the other members instead of the entire canvas,
           since they now live on an exclusive layer (see
           evas_object_stack_above(), for more details).

           Any $smart_obj object's specific implementation of the
           $member_add() smart function will take place too, naturally.

           See also @.group_member_del.
         ]]
         params {
            @in sub_obj: Efl.Canvas.Object @nonull; [[The member object.]]
         }
         legacy: null;
      }
      group_member_del {
         [[Removes a member object from a given smart object.

           This removes a member object from a smart object, if it was added
           to any. The object will still be on the canvas, but no longer
           associated with whichever smart object it was associated with.

           See also @.group_member_add for more details.
         ]]
         params {
            @in sub_obj: Efl.Canvas.Object; [[The member object.]]
         }
         legacy: null;
      }
      group_add @protected @beta /* @internal */ {
         [[Internal constructor function.]]
         legacy: null;
      }
      group_del @protected @beta /* @internal */ {
         [[Internal destructor function.]]
         legacy: null;
      }
   }
   implements {
      class.constructor;
      class.destructor;
      Efl.Object.constructor;
      Efl.Object.destructor;
      Efl.Canvas.Object.no_render { set; }
      Efl.Canvas.Object.paragraph_direction { get; set; }
   }
}
