import eina_types;

abstract Efl.VG (Efl.Object, Efl.Gfx, Efl.Gfx.Stack)
{
   [[Efl vector graphics abstract class]]
   eo_prefix: efl_vg;
   legacy_prefix: evas_vg_node;
   methods {
      @property name {
         set {
            [[Set an unique name from the parent point of view. $null means
              no name.

              @since 1.16
            ]]
         }
         get {
            [[Get an unique name from the parent point of view.

              $null means no name. When set a parent after the name what
              defined, it might be forced back to $null if the parent
              already has a node of that name.

              @since 1.16
            ]]
         }
         values {
            name: string; [[Node name]]
         }
      }
      @property transformation {
         set {
            [[Sets the transformation matrix to be used for this node object.

              Note: Pass $null to cancel the applied transformation.

              @since 1.14]]
         }
         get {
            [[Gets the transformation matrix used for this node object.

              @since 1.14]]
         }
         values {
            m: ptr(const(Eina.Matrix3)); [[Transformation matrix.]]
         }
      }
      @property origin {
         set {
            [[Sets the origin position of this node object.

              This origin position affects to node transformation.

              @since 1.14]]
         }
         get {
            [[Gets the origin position of this node object.

              @since 1.14]]
         }
         values {
            x: double; [[$origin x position.]]
            y: double; [[$origin y position.]]
         }
      }
      @property mask {
         [[Vector graphics object mask]]
         set {
         }
         get {
         }
         values {
            m: Efl.VG; [[Object mask]]
         }
      }
/*      quality {
         set {
         }
         get {
         }
         values {
            Evas_VG_Quality q;
         }
      } */
      bounds_get @pure_virtual {
         [[Give the bounding box in screen coordinate as being drawn.

           It will start as the control box until it is refined once the shape
           is computed.

           @since 1.14]]
         params {
            @out r: Eina.Rectangle; [[Bounding box to be returned.]]
         }
      }
      interpolate {
        [[Interpolate a given vector graphics object]]

        return: bool; [[$true on success, $false otherwise]]
        params {
          @in from: const(Efl.VG); [[Source object]]
          @in to: const(Efl.VG); [[Destination object]]
          @in pos_map: double; [[Interpolate mapping]]
        }
      }
      dup {
        [[Duplicate vector graphics object]]
        params {
          @in from: const(Efl.VG); [[Source object]]
        }
      }
   }
   implements {
      Efl.Object.parent { set; }
      Efl.Object.constructor;
      Efl.Object.destructor;
      Efl.Gfx.visible { get; set; }
      Efl.Gfx.color { get; set; }
      Efl.Gfx.color_part { get; set; }
      Efl.Gfx.size { get; }
      Efl.Gfx.position { get; set; }
      Efl.Gfx.geometry { get; }
      Efl.Gfx.Stack.below { get; }
      Efl.Gfx.Stack.above { get; }
      Efl.Gfx.Stack.stack_below;
      Efl.Gfx.Stack.stack_above;
      Efl.Gfx.Stack.raise;
      Efl.Gfx.Stack.lower;
   }
}
