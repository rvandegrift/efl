mixin Efl.Canvas.Filter.Internal (Efl.Gfx.Filter, Eo.Base)
{
   [[Evas internal implementation of filters.]]

   eo_prefix: evas;
   data: Evas_Filter_Data;

   methods {
      @property filter_changed @protected {
         set {
            [[Marks this filter as changed.]]
         }
         values {
            val: bool;
         }
      }
      @property filter_invalid @protected {
         set {
            [[Marks this filter as invalid.]]
         }
         values {
            val: bool;
         }
      }
      filter_input_alpha @protected @virtual_pure {
         [[Called by Efl.Canvas.Filter.Internal to determine whether the input is alpha or rgba.]]
         return: bool;
      }
      filter_input_render @protected @virtual_pure {
         [[Called by Efl.Canvas.Filter.Internal when the parent class must render the input.
         ;
         ]]
         return: bool; [[Indicates success from the object render function.]]
         params {
            filter: void_ptr; [[Evas_Filter_Context]]
            drawctx: void_ptr;
            l: int;
            r: int;
            t: int;
            b: int;
            do_async: bool;
         }
      }
      filter_dirty @protected @virtual_pure {
         [[Called when the filter changes must trigger a redraw of the object.

           Virtual, to be implemented in the parent class.
         ]]
      }
      @property filter_output_buffer @protected {
         get {
            [[Retrieve cached output buffer, if any.

              Does not increment the reference count.
            ]]
         }
         values {
            buffer: void_ptr;
         }
      }
   }
   implements {
      Eo.Base.constructor;
      Eo.Base.destructor;
      Efl.Gfx.Filter.filter_program.set;
      Efl.Gfx.Filter.filter_program.get;
      Efl.Gfx.Filter.filter_state.get;
      Efl.Gfx.Filter.filter_state.set;
      Efl.Gfx.Filter.filter_padding.get;
      Efl.Gfx.Filter.filter_source.set;
      Efl.Gfx.Filter.filter_source.get;
      Efl.Gfx.Filter.filter_data.get;
      Efl.Gfx.Filter.filter_data.set;
   }
}
