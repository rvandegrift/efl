class Efl.Input.Key (Efl.Object, Efl.Input.Event, Efl.Input.State, Efl.Input.Event)
{
   [[Represents a single key event from a keyboard or similar device.

     @since 1.18
   ]]
   methods {
      @property pressed {
         [[$true if the key is down, $false if it is released.]]
         values {
            val: bool; [[$true if the key is pressed, $false otherwise]]
         }
      }
      @property key_name {
         [[Name string of the key.]]
         values {
            val: string; [[Key name]]
         }
      }
      @property key {
         [[Logical key.

           Eg. Shift + 1 = exclamation
         ]]
         values {
            val: string; [[Logical key name]]
         }
      }
      @property string {
         [[A UTF8 string if this keystroke has produced a visible string to be
           added.
         ]]
         values {
            val: string; [[Visible string from key press in UTF8]]
         }
      }
      @property compose {
         [[A UTF8 string if this keystroke has modified a string in the middle
           of being composed.

           Note: This string replaces the previous one
         ]]
         values {
            val: string; [[Composed key string in UTF8]]
         }
      }
      @property key_code {
         [[Key scan code numeric value.]]
         values {
            val: int; [[Key scan code]]
         }
      }
   }
   implements {
      class.destructor;
      Efl.Object.constructor;
      Efl.Object.destructor;
      Efl.Input.Event.reset;
      Efl.Input.Event.dup;
      Efl.Input.Event.timestamp { get; set; }
      Efl.Input.Event.fake { get; }
      Efl.Input.Event.event_flags { get; set; }
      Efl.Input.Event.device { get; set; }
      Efl.Input.State.modifier_enabled { get; }
      Efl.Input.State.lock_enabled { get; }
   }
}
