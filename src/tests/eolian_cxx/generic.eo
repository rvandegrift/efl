
struct Generic.Event
{
  field1: int;
  field2: list<int>;
}

class Generic (Efl.Object)
{
   data: Generic_Data;
   methods {
      @property req_ctor_a_value {
         get {
         }
         values {
            value: int;
         }
      }
      @property opt_ctor_a_value {
         get {
         }
         values {
            value: int;
         }
      }
      required_ctor_a {
         params {
            @in value: int;
         }
      }
      required_ctor_b {
         params {
            @in value: int;
         }
      }
      optional_ctor_a {
         params {
            @in value: int;
         }
      }
      optional_ctor_b {
         params {
            @in value: int;
         }
      }

      @property req_ctor_b_value {
         get {}
         values {
            value: int;
         }
      }
      @property opt_ctor_b_value {
         get {}
         values {
            value: int;
         }
      }
      out_required_ctor_a {
         params {
            @out value: int;
         }
      }
      out_required_ctor_b {
         params {
            @out value: int;
         }
      }
      out_optional_ctor_a {
         params {
            @out value: int;
         }
      }
      out_optional_ctor_b {
         params {
            @out value: int;
         }
      }

      call_event1 {
      }
      call_event2 {
      }
      call_event3 {
      }
      call_event4 {
      }
      call_event5 {
      }

      protected_method1 @protected {
      }
      beta_method1 @beta {
      }
      protected_beta_method1 @protected @beta {
      }
   }
   constructors {
      .required_ctor_a;
      .required_ctor_b;
      .optional_ctor_a @optional;
      .optional_ctor_b @optional;
   }
   implements {
      Efl.Object.constructor;
   }
   events {
     prefix,event1;
     prefix,event2: Generic;
     prefix,event3: int;
     prefix,event4: list<int>;
     prefix,event5: Generic.Event;
     protected,event1 @protected;
     beta,event1 @beta;
     protected,beta,event1 @beta @protected;
   }
}
