class Complex (Eo.Base)
{
   data: Complex_Data;
   methods {
      // container test
      inptrcont {
         params {
           l: list<int*>;
         }
      }
      inclasscont {
         params {
           l: list<Eo.Base>;
         }
      }
      inptrptrcont {
         params {
           l: list<int**>;
         }
      }
      inptrcontown {
         params {
           l: own(list<int*>);
         }
      }
      inptrptrcontown {
         params {
           l: own(list<int**>);
         }
      }
      incontcont {
         params {
           l: list<list<int>>;
         }
      }
      incontcontown {
         params {
           l: own(list<list<int>>);
         }
      }
      incontowncontown {
         params {
           l: own(list<own(list<int>)>);
         }
      }
      incontowncont {
         params {
           l: list<own(list<int>)>;
         }
      }
      instringcont {
         params {
           l: list<string>;
         }
      }
      instringowncont {
         params {
           l: list<own(string)>;
         }
      }
      instringcontown {
         params {
           l: own(list<string>);
         }
      }
      inarray {
         params {
           l: array<int>;
         }
      }
      inarrayown {
         params {
           l: own(array<int>);
         }
      }
      inhash {
         params {
           l: hash<int, int>;
         }
      }
      inhashown {
         params {
           l: own(hash<int, int>);
         }
      }
      initerator {
         params {
           l: iterator<int>;
         }
      }
      initeratorown {
         params {
           l: own(iterator<int>);
         }
      }
      inaccessor {
         params {
           l: accessor<int>;
         }
      }
      inaccessorown {
         params {
           l: own(accessor<int>);
         }
      }
      // out
      outptrcont {
         params {
           @out l: list<int*>;
         }
      }
      outclasscont {
         params {
           @out l: list<Eo.Base>;
         }
      }
      outcontcont {
         params {
           @out l: list<list<int>>;
         }
      }
      outcontcontown {
         params {
           @out l: own(list<list<int>>);
         }
      }
      outcontowncontown {
         params {
           @out l: own(list<own(list<int>)>);
         }
      }
      outcontowncont {
         params {
           @out l: list<own(list<int>)>;
         }
      }
      outstringcont {
         params {
           @out l: list<string>;
         }
      }
      outstringowncont {
         params {
           @out l: list<own(string)>;
         }
      }
      outstringcontown {
         params {
           @out l: own(list<string>);
         }
      }
      outarray {
         params {
           @out l: array<int>;
         }
      }
      outarrayown {
         params {
           @out l: own(array<int>);
         }
      }
      outhash {
         params {
           @out l: hash<int, int>;
         }
      }
      outhashown {
         params {
           @out l: own(hash<int, int>);
         }
      }
      outiterator {
         params {
           @out l: iterator<int>;
         }
      }
      outiteratorown {
         params {
           @out l: own(iterator<int>);
         }
      }
      outaccessor {
         params {
           @out l: accessor<int>;
         }
      }
      outaccessorown {
         params {
           @out l: own(accessor<int>);
         }
      }
      //
      foo {
         params {
            l: list<int>;
         }
      }
      bar {
         return: array<int>;
      }
      wrapper_r {
         return: Complex;
      }
      wrapper_in {
         params {
            @in a1: Complex;
         }
      }
      wrapper_inout {
         params {
            @inout a1: Complex;
         }
      }
      wrapper_out {
         params {
            @out a1: Complex;
         }
      }
      with_promise_r {
         return: promise<int>;
      }
      with_promise_in {
         params {
            @in p: promise<int>;
         }
      }
      with_promise_out {
         params {
            @out p: promise<int>;
         }
      }
      with_promise_inout {
         params {
            @inout p: promise<int>;
         }
      }
   }
}

