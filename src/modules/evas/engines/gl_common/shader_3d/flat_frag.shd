varying vec2   vFactor;

FRAGMENT_SHADER_USE_TEX_COORD
FRAGMENT_SHADER_USE_FOG
FRAGMENT_SHADER_USE_SHADOWS
FRAGMENT_SHADER_USE_DIFFUSE_TERM
FRAGMENT_SHADER_USE_SPECULAR_TERM
FRAGMENT_SHADER_USE_AMBIENT_TERM
FRAGMENT_SHADER_USE_EMISSION_TERM
FRAGMENT_SHADER_USE_ALPHA_TEST_GLES

vec4 fragmentFlat()
{
   vec4 color;
   vec4 fragcolor;
#ifdef DIFFUSE

   FRAGMENT_SHADER_TEXTURE_BLEND(DIFFUSE, Diffuse)
   fragcolor = uLightDiffuse * color * vFactor.x;
#else
   fragcolor = vec4(0.0, 0.0, 0.0, 0.0);
#endif //DIFFUSE

#ifdef SPECULAR

   FRAGMENT_SHADER_TEXTURE_BLEND(SPECULAR, Specular)
   fragcolor += uLightSpecular * color * vFactor.y;

#endif //SPECULAR

#ifdef SHADOWED
   fragcolor *= shadow;
#endif //SHADOWED

#ifdef AMBIENT

   FRAGMENT_SHADER_TEXTURE_BLEND(AMBIENT, Ambient)
   fragcolor += uLightAmbient * color;
#endif //AMBIENT

#ifdef  EMISSION

   FRAGMENT_SHADER_TEXTURE_BLEND(EMISSION, Emission)
   fragcolor += color;
#endif //EMISSION
   return fragcolor;
}

void main() {
   vec4 color;
#ifdef SHADOWED
   shadow = pcf(vLightPosition);
#endif //SHADOWED

   color = fragmentFlat();

#ifdef ALPHA_TEST_ENABLED
   FRAGMENT_SHADER_ALPHA_TEST_GLES_APPLY(color)
#else
   gl_FragColor = color;
#endif //ALPHA_TEST_ENABLED

   FRAGMENT_SHADER_FOG_APPLY
}
