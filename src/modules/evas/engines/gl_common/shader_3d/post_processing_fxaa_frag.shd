//FXAA fragment shader by Timothy Lottes
//http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf
//modified and adapted to www.enlightenment.org by Oleksander Shcherbina
uniform sampler2D uColorTexture;
uniform float uFrameSizeH;
uniform float uFrameSizeW;
varying vec2 tc0;

vec4 fxaa()
{
   float _SPAN_MAX_ = 8.0;
   float _REDUCE_MUL_ = (1.0/8.0);
   float _REDUCE_MIN_ = (1.0/128.0);
   vec4 l = vec4(0.299, 0.587, 0.114, 0.0);
   vec2 frameBufSize = vec2(uFrameSizeW, uFrameSizeH);
   vec2 direction;

   vec4 colorNW = texture2D(uColorTexture, tc0 + (vec2(-1.0, -1.0)/frameBufSize));
   vec4 colorNE = texture2D(uColorTexture, tc0 + (vec2(1.0, -1.0)/frameBufSize));
   vec4 colorSW = texture2D(uColorTexture, tc0 + (vec2(-1.0, 1.0)/frameBufSize));
   vec4 colorSE = texture2D(uColorTexture, tc0 + (vec2(1.0, 1.0)/frameBufSize));
   vec4 colorM = texture2D(uColorTexture,tc0);

   float lNW = dot(colorNW, l);
   float lNE = dot(colorNE, l);
   float lSW = dot(colorSW, l);
   float lSE = dot(colorSE, l);
   float lM  = dot(colorM,  l);

   float lMin = min(lM, min(min(lNW, lNE), min(lSW, lSE)));
   float lMax = max(lM, max(max(lNW, lNE), max(lSW, lSE)));

   direction.x = -((lNW + lNE) - (lSW + lSE));
   direction.y = ((lNW + lSW) - (lNE + lSE));

   float directionReduce = max(
          (lNW + lNE + lSW + lSE) * (0.25 * _REDUCE_MUL_),
          _REDUCE_MIN_);

   float rcpDirMin = 1.0/(min(abs(direction.x), abs(direction.y)) + directionReduce);

   direction = min(vec2(_SPAN_MAX_,  _SPAN_MAX_),
             max(vec2(-_SPAN_MAX_, -_SPAN_MAX_),
             direction * rcpDirMin)) / frameBufSize;

   vec4 colorA = 0.5 * (
          texture2D(uColorTexture, tc0.xy + direction * (1.0/3.0 - 0.5)) +
          texture2D(uColorTexture, tc0.xy + direction * (2.0/3.0 - 0.5)));
   vec4 colorB = colorA * 0.5 + 0.25 * (
          texture2D(uColorTexture, tc0.xy + direction * (- 0.5)) +
          texture2D(uColorTexture, tc0.xy + direction * 0.5));
   float lB = dot(colorB, l);

   if((lB < lMin) || (lB > lMax))
     return colorA;
   else
     return colorB;
}

void main()
{
   gl_FragColor = fxaa();
}
